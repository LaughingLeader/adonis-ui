<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:adonisExtensions="clr-namespace:AdonisUI.Extensions;assembly=AdonisUI"
    xmlns:adonisUi="clr-namespace:AdonisUI;assembly=AdonisUI"
    xmlns:converters="clr-namespace:AdonisUI.Converters;assembly=AdonisUI">


	<ResourceDictionary.MergedDictionaries>
		<ResourceDictionary Source="pack://application:,,,/AdonisUI.ClassicTheme;component/DefaultStyles/ToggleButton.xaml" />
	</ResourceDictionary.MergedDictionaries>


	<Style x:Key="{x:Static adonisUi:Styles.ToggleSwitch}" BasedOn="{StaticResource {x:Type ToggleButton}}" TargetType="ToggleButton">

		<Setter Property="Padding" Value="0" />
		<Setter Property="HorizontalContentAlignment" Value="Left" />
		<Setter Property="adonisExtensions:CornerRadiusExtension.CornerRadius" Value="7" />

		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type ToggleButton}">
					<Grid>
						<Grid.ColumnDefinitions>
							<ColumnDefinition Width="28" />
							<ColumnDefinition Width="{adonisUi:Space 1}" />
							<ColumnDefinition Width="*" />
						</Grid.ColumnDefinitions>

						<Grid Height="14">
							<Border Background="{TemplateBinding Background}" CornerRadius="{TemplateBinding adonisExtensions:CornerRadiusExtension.CornerRadius}" />

							<Border BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" CornerRadius="{TemplateBinding adonisExtensions:CornerRadiusExtension.CornerRadius}" />

							<Border x:Name="SpotlightLayer"
							    adonisExtensions:CursorSpotlightExtension.MouseEventSource="{Binding RelativeSource={RelativeSource FindAncestor, AncestorType=ToggleButton}}"
							    Background="{TemplateBinding adonisExtensions:CursorSpotlightExtension.BackgroundBrush}"
							    BorderBrush="{TemplateBinding adonisExtensions:CursorSpotlightExtension.BorderBrush}"
							    BorderThickness="{TemplateBinding BorderThickness}"
							    CornerRadius="{TemplateBinding adonisExtensions:CornerRadiusExtension.CornerRadius}"
							    SnapsToDevicePixels="False" />

							<Border x:Name="CheckMark"
							    Width="8"
							    Height="8"
							    Margin="4,0"
							    HorizontalAlignment="Left"
							    Background="{TemplateBinding Foreground}"
							    CornerRadius="4">
								<Border.RenderTransform>
									<TranslateTransform X="0" />
								</Border.RenderTransform>
							</Border>
						</Grid>

						<ContentPresenter Grid.Column="2"
						    Margin="{TemplateBinding Padding}"
						    HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
						    VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
						    Content="{Binding Content, RelativeSource={RelativeSource TemplatedParent}}"
						    ContentTemplate="{TemplateBinding ContentTemplate}" />
					</Grid>

					<ControlTemplate.Triggers>

						<Trigger Property="IsChecked" Value="False">
							<Setter TargetName="CheckMark" Property="Opacity" Value="0.5" />
						</Trigger>

						<MultiTrigger>
							<MultiTrigger.Conditions>
								<Condition Property="IsChecked" Value="True" />
								<Condition Property="IsEnabled" Value="True" />
							</MultiTrigger.Conditions>
							<Setter TargetName="CheckMark" Property="Background" Value="{DynamicResource {x:Static adonisUi:Brushes.AccentForegroundBrush}}" />
						</MultiTrigger>

						<Trigger Property="IsChecked" Value="True">
							<Trigger.EnterActions>
								<BeginStoryboard>
									<Storyboard>
										<DoubleAnimation Storyboard.TargetName="CheckMark"
										    Storyboard.TargetProperty="RenderTransform.(TranslateTransform.X)"
										    To="12"
										    Duration="0:0:0.1" />
									</Storyboard>
								</BeginStoryboard>
							</Trigger.EnterActions>
							<Trigger.ExitActions>
								<BeginStoryboard>
									<Storyboard>
										<DoubleAnimation Storyboard.TargetName="CheckMark" Storyboard.TargetProperty="RenderTransform.(TranslateTransform.X)" Duration="0:0:0.1" />
									</Storyboard>
								</BeginStoryboard>
							</Trigger.ExitActions>
						</Trigger>

					</ControlTemplate.Triggers>

				</ControlTemplate>
			</Setter.Value>
		</Setter>

		<Style.Triggers>

			<MultiTrigger>
				<MultiTrigger.Conditions>
					<Condition Property="IsChecked" Value="True" />
					<Condition Property="IsEnabled" Value="True" />
				</MultiTrigger.Conditions>
				<Setter Property="Background" Value="{DynamicResource {x:Static adonisUi:Brushes.AccentBrush}}" />
				<Setter Property="BorderBrush" Value="{DynamicResource {x:Static adonisUi:Brushes.AccentBrush}}" />
			</MultiTrigger>

			<MultiTrigger>
				<MultiTrigger.Conditions>
					<Condition Property="IsChecked" Value="True" />
					<Condition Property="IsMouseOver" Value="True" />
				</MultiTrigger.Conditions>
				<Setter Property="Background" Value="{DynamicResource {x:Static adonisUi:Brushes.AccentBrush}}" />
				<Setter Property="BorderBrush" Value="{DynamicResource {x:Static adonisUi:Brushes.AccentBrush}}" />
				<Setter Property="adonisExtensions:CursorSpotlightExtension.BackgroundBrush" Value="{DynamicResource {x:Static adonisUi:Brushes.AccentHighlightBrush}}" />
				<Setter Property="adonisExtensions:CursorSpotlightExtension.BorderBrush" Value="{DynamicResource {x:Static adonisUi:Brushes.AccentHighlightBrush}}" />
			</MultiTrigger>

			<Trigger Property="IsEnabled" Value="False">
				<Setter Property="Foreground" Value="{DynamicResource {x:Static adonisUi:Brushes.DisabledForegroundBrush}}" />
				<Setter Property="Background" Value="{DynamicResource {x:Static adonisUi:Brushes.Layer0BackgroundBrush}}" />
			</Trigger>

		</Style.Triggers>
	</Style>

</ResourceDictionary>